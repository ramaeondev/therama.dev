name: Deploy to AWS S3 + CloudFront + CloudFront Invalidation

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Cache Next.js build
      uses: actions/cache@v3
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-

    - name: Copy README and package.json to public/
      run: |
        mkdir -p public/meta
        cp README.md public/meta/
        cp package.json public/meta/

    - name: Read package.json and POST to Projects table          
      run: |
          VERSION=$(jq -r '.version' package.json)
          STATUS=$(jq -r '.status' package.json)
          PROJECT_ID=$(jq -r '.project_id' package.json)
          update_project_version=$(jq -r '.update_project_version' package.json)
  
          echo "Version: $VERSION"
          echo "Status: $STATUS"
          echo "Project ID: $PROJECT_ID"
          echo "update_project_version: $update_project_version"
  
          RESPONSE=$(curl -s -X POST $update_project_version \
            -H "Content-Type: application/json" \
            -d '{
              "project_id": "'"$PROJECT_ID"'",
              "version": "'"$VERSION"'",
              "status": "'"$STATUS"'"
            }')
  
          echo "$RESPONSE" > deployment-status.json
  
    - name: Upload deployment status as artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-status
        path: deployment-status.json
  
    - name: Build application
      run: npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_GLOBAL }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_GLOBAL }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to S3
      run: |
        aws s3 sync out/ s3://${{ secrets.S3_BUCKET }} --delete
        aws s3 cp s3://${{ secrets.S3_BUCKET }}/_next s3://${{ secrets.S3_BUCKET }}/_next --recursive --cache-control "public, max-age=31536000, immutable"
        aws s3 cp s3://${{ secrets.S3_BUCKET }}/static s3://${{ secrets.S3_BUCKET }}/static --recursive --cache-control "public, max-age=31536000, immutable"

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
          
    - name: Log deployment to Supabase
      run: |
          VERSION=$(jq -r '.version' package.json)
          STATUS=$(jq -r '.status' package.json)
          PROJECT_ID=$(jq -r '.project_id' package.json)
          log_deployment=$(jq -r '.log_deployment' package.json)
          START_TIME=$(date +%s)
      
          # Assume previous steps include build + deploy
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
      
          curl -s -X POST "$log_deployment" \
            -H "Content-Type: application/json" \
            -d '{
              "project_id": "'"$PROJECT_ID"'",
              "version": "'"$VERSION"'",
              "status": "'"$STATUS"'",
              "github_sha": "'"${{ github.sha }}"'",
              "github_ref": "'"${{ github.ref }}"'",
              "actor": "'"${{ github.actor }}"'",
              "notes": "Auto-deploy from GitHub",
              "deployment_url": "https://therama.dev/",
              "duration_in_seconds": '"$DURATION"',
              "success": true
            }'
      