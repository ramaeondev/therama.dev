name: Deployment Logger and Version Updater
description: |
  This action updates the project version in Supabase and logs the deployment details.
  It also uploads the README file to S3 and stores the deployment status and log payload as artifacts.
author: therama.dev
branding:
  icon: "upload-cloud"  # More descriptive for deployment
  color: "purple"       # Stands out in marketplace

inputs:
  start_time:
    description: Unix timestamp of deployment start
    required: true
  s3_bucket:
    description: S3 bucket name for uploads
    required: true

runs:
  using: "composite"
  steps:
    - name: Read package.json
      shell: bash
      run: |
        echo "Reading deployment configuration from package.json..."
        # Extract required values with error handling
        if [ ! -f package.json ]; then
          echo "::error::package.json not found in the repository root"
          exit 1
        fi

        VERSION=$(jq -r '.version' package.json)
        STATUS=$(jq -r '.status' package.json)
        PROJECT_ID=$(jq -r '.project_id' package.json)
        UPDATE_PROJECT_VERSION=$(jq -r '.update_project_version' package.json)
        LOG_DEPLOYMENT=$(jq -r '.log_deployment' package.json)
        HOME_PAGE=$(jq -r '.homepage' package.json)
        COMMIT_MESSAGE=$(git log -1 --pretty=%B | sed 's/"/\\"/g')

        # Validate required fields
        [[ -z "$VERSION" ]] && echo "::error::version not found in package.json" && exit 1
        [[ -z "$PROJECT_ID" ]] && echo "::error::project_id not found in package.json" && exit 1

        echo "Configuration loaded successfully:"
        echo "- Version: $VERSION"
        echo "- Project ID: $PROJECT_ID"
        echo "- Status: $STATUS"

        # Store values for reuse
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "STATUS=$STATUS" >> $GITHUB_ENV
        echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
        echo "UPDATE_PROJECT_VERSION=$UPDATE_PROJECT_VERSION" >> $GITHUB_ENV
        echo "LOG_DEPLOYMENT=$LOG_DEPLOYMENT" >> $GITHUB_ENV
        echo "HOME_PAGE=$HOME_PAGE" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

    - name: POST to Projects table
      shell: bash
      run: |
        echo "Updating project version in Supabase..."
        echo "API Endpoint: ${UPDATE_PROJECT_VERSION/#https:\/\/api./https://[MASKED].}"
        
        RESPONSE=$(curl -s -X POST "$UPDATE_PROJECT_VERSION" \
          -H "Content-Type: application/json" \
          -d '{
            "project_id": "'"$PROJECT_ID"'",
            "version": "'"$VERSION"'",
            "status": "'"$STATUS"'"
          }')
        
        # Log response details without sensitive data
        echo "Response received ($(echo "$RESPONSE" | wc -c) bytes)"
        
        # Check if request was successful
        if [[ $(echo "$RESPONSE" | jq -r '.error') != "null" ]]; then
          echo "::error::Failed to update project version: $(echo "$RESPONSE" | jq -r '.error')"
          exit 1
        fi
        
        echo "Project version updated successfully âœ…"
        echo "$RESPONSE" > deployment-status.json

    - name: Log deployment to Supabase
      shell: bash
      run: |
        echo "Logging deployment details..."
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - ${{ inputs.start_time }}))
        IS_SUCCESS=${{ job.status == 'success' && 'true' || 'false' }}

        echo "Deployment duration: $DURATION seconds"
        echo "Deployment status: $IS_SUCCESS"

        JSON_PAYLOAD=$(cat <<EOF
        {
          "project_id": "$PROJECT_ID",
          "version": "$VERSION",
          "status": "$STATUS",
          "github_sha": "${{ github.sha }}",
          "github_ref": "${{ github.ref }}",
          "actor": "${{ github.actor }}",
          "commit_message": "$COMMIT_MESSAGE",
          "deployment_url": "$HOME_PAGE",
          "duration_in_seconds": $DURATION,
          "is_success": $IS_SUCCESS
        }
        EOF
        )

        RESPONSE=$(curl -s -X POST "$LOG_DEPLOYMENT" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD")

        if [[ $(echo "$RESPONSE" | jq -r '.error') != "null" ]]; then
          echo "::warning::Failed to log deployment: $RESPONSE"
        else
          echo "Deployment logged successfully"
        fi

        echo "$JSON_PAYLOAD" > log-deployment-response.json
    
    - name: Prepare meta files
      shell: bash
      run: |
        echo "Preparing metadata files..."
        # Get repository name and create directories
        REPO_NAME=$(basename $GITHUB_REPOSITORY)
        mkdir -p public/meta
        
        # Copy README with error checking
        if [ -f README.md ]; then
          cp README.md public/meta/${REPO_NAME}.md
          echo "README.md copied successfully"
        else
          echo "::warning::README.md not found, creating empty file"
          touch public/meta/${REPO_NAME}.md
        fi

        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
        
    - name: Upload README to S3
      shell: bash
      run: |
        echo "Uploading README to S3..."
        aws s3 cp \
          public/meta/${{ env.REPO_NAME }}.md \
          s3://${{ inputs.s3_bucket }}/readme/${{ env.REPO_NAME }}.md \
          --content-type "text/markdown; charset=utf-8"

        if [ $? -eq 0 ]; then
          echo "README uploaded successfully to s3://${{ inputs.s3_bucket }}/readme/${{ env.REPO_NAME }}.md"
        else
          echo "::error::Failed to upload README to S3"
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-status
        path: deployment-status.json

    - name: Upload log payload
      uses: actions/upload-artifact@v4
      with:
        name: log-deployment-response
        path: log-deployment-response.json
